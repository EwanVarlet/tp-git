ewan varlet

Travail à faire


1) Ouvrir un terminal (terminal Git Bash à privilégier)


2) Créer, en ligne de commande, un répertoire tp-git
-mkdir tp-git

3) Se déplacer dans le répertoire
-cd tp-git

4)Vérifier qu'on est dans le bon répertoire en affichant le chemin du répertoire courant
-pwd

5) Initialiser un dépôt Git
-git init

6) Lister tous les fichiers du répertoire (y compris les fichiers cachés) pour s'assurer que le répertoire .git à été créé
-ls -la

7) Ouvrir ce répertoire sous VS Code
-code /c/users/myname/documents/tp-git

8) Exécuter git status et copier/coller la sortie
-On branch master
-No commits yet
-nothing to commit (create/copy files and use "git add" to track)


9) Créer le fichier fichier1.md avec un contenu quelconque et l'enregistrer
-touch fichier1.md

10) Créer le fichier fichier2.md avec un contenu quelconque et l'enregistrer
-touch fichier2.md

11) Exécuter git status et copier/coller la sortie
-On branch master
-No commits yet
-untracked files:
-   (use "git add <file>..." to include in what will be comited)
-nothing added to commit but untracked file present (use "git add" to track)

12) Ajouter fichier1.md à l'index de Git (zone de Staging)
-git add fichier1.md

13) Exécuter git status et copier/coller la sortie
-On branch master
-No commits yet
-Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   fichier1.md

-Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md

14) Créer un commit avec pour message : "Ajout de fichier1.md"
-$ git commit -m "ajout du fichier fichier1.md"
[master (root-commit) 9e95b34] ajout du fichier fichier1.md
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 fichier1.md

15) Exécuter git status et copier/coller la sortie
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md

nothing added to commit but untracked files present (use "git add" to track)


16) Modifier fichier1.md et enregistrer

17) Exécuter git status et copier/coller la sortie
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   fichier1.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md

no changes added to commit (use "git add" and/or "git commit -a")


18) Ajouter fichier1.md et fichier2.md à la zone de Staging
git add fichier2.md


19) Créer un commit "Ajout de fichier2.md et modification de fichier1.md"
git commit -m "Ajout de fichier2.md et modification de fichier1.md"

20)Copier/coller l'ID des deux premiers commits :
ID commit 1 :commit 9e95b34e9354143596e7f5d642af9ff9714845af
ID commit 2 :commit 393117f7a0aca826f6866f811d0acb6f381591d4

21)Que signifie qu'un fichier est "tracked" ou "untracked" ?
un fichier tracked c'est un fichier qui est ajoutée au dépot
un fichier untracked c'est un fichier qui n'a pas été ajoutée a un dépot

21) Pourquoi doit-on passer les fichiers par la zone de Staging (l'index) avant de les committer ?
permettre une plus grande flexibilité et contrôle sur les fichiers qui sont inclus dans un commit.

22)Créer une branche fonctionnalite1
git branch fonctionnalite1

23)Lister les branches
$ git branch
  fonctionnalite1
* master

24)Se déplacer sur la branche fonctionnalite1
$ git checkout fonctionnalite1
Switched to branch 'fonctionnalite1'
M       fichier1.md

25)Lister les branches
$ git branch
* fonctionnalite1
  master

26)Que représente l'étoile à côté des noms des branches ?
elle signifie sur qu'elle banche nous sommes

27)Créer un nouveau fichier fichier3.md
touch fichier3.md

28)Modifier le fichier fichier2.md







29)Comment utiliser VS Code pour qu'il nous montre les différences entre l'ancienne version de fichier2.md et la version courante que l'on vient d'éditer ?
Ouvrez le fichier "fichier2.md" dans VS Code.
Cliquez sur l'onglet "Fichier" dans la barre de menu en haut de l'écran.
Sélectionnez "Comparaison de fichiers" dans le menu déroulant.
Sélectionnez "Fichier actuel" dans la première section de la fenêtre qui s'ouvre.
Sélectionnez "Ancien fichier" dans la seconde section de la fenêtre.
Naviguez jusqu'à l'emplacement de l'ancienne version de "fichier2.md" et sélectionnez-le.

30) Committer ces deux modifications : "Fonctionnalité 1 - première phase"
git add fichier3.md
git add fichier2.md
$ git commit -m "fonctionalite 1 - terminee"
[fonctionnalite1 4fdde80] fonctionalite 1 - terminee
 2 files changed, 2 insertions(+)
 create mode 100644 fichier3.md



31) Créer un nouveau fichier fichier4.md
touch fichier4.md

32) Modifier de nouveau le fichier fichier2.md

33) Committer ces deux modifications : "Fonctionnalité 1 - terminée"
$ git commit -m "fonctionalite 1 - terminee"
[fonctionnalite1 8fd2033] fonctionalite 1 - terminee
 2 files changed, 2 insertions(+), 1 deletion(-)
 create mode 100644 fichier4.md

34) Afficher la liste des fichiers du répertoire
$ ls -ltr
total 2
-rw-r--r-- 1 kvarl 197611 17 Jan 10 09:45 fichier1.md
-rw-r--r-- 1 kvarl 197611  0 Jan 10 10:04 fichier3.md
-rw-r--r-- 1 kvarl 197611  0 Jan 17 09:03 fichier4.md
-rw-r--r-- 1 kvarl 197611 39 Jan 17 09:14 fichier2.md





35) Se déplacer sur la branche master
$ git checkout master
Switched to branch 'master'
M       fichier1.md


36) Afficher la liste des fichiers du répertoire
$ ls -ltr
total 1
-rw-r--r-- 1 kvarl 197611 17 Jan 10 09:45 fichier1.md
-rw-r--r-- 1 kvarl 197611  0 Jan 17 09:34 fichier2.md

37) Pourquoi les deux sorties sont-elles différentes ? Les fichiers ont-ils disparus ?
Les fichiers de la branche "master" peuvent être différents des autres branches dans Git car la branche "master" est généralement utilisée pour stocker la version stable et fonctionnelle de votre projet et non ils n’ont pas disparu

38) Créer une nouvelle branche fonctionnalite2
$ git branch fonctionnalite2

39) Cette branche ne va pas avoir toutes les données incluses dans fonctionnalite1. Pourquoi ?
car c’est une nouvelle branche

40) Qu'aurait-il fallu faire si on avait souhaité démarrer la branche fonctionnalite2 en intégrant les modifications récentes de fonctionnalite1 ?
les fusionnées

41) Se déplacer sur la nouvelle branche fonctionnalite2
$ git switch fonctionnalite2
Switched to branch 'fonctionnalite2'
M       fichier1.md

42) Créer un nouveau fichier fichier5.md
touch fichier 5

43) Faire un commit intégrant cette ajout : "Ajout fichier5.md"
git commit -m “ajout fichier5.md)

44) Entrer la commande git log --oneline --decorate --graph --all pour visualiser, sur le terminal, le graphe des commits sur toutes les branches
$ git log --oneline --decorate --graph --all
* 8fd2033 (fonctionnalite1) fonctionalite 1 - terminee
* 4fdde80 fonctionalite 1 - terminee
* 393117f (HEAD -> fonctionnalite2, master) Ajout de fichier2.md et modification de fichier1.md
* 9e95b34 ajout du fichier fichier1.md



45) Noter la « déviation » entre les deux branches, à partir de la branche master

46) Installer l'extension VS Code Git Graph et visualiser le graphe actuel des commits à l'aide de cette extension

47) Sur cette représentation, que représente les points ?
ils representent des commit

48) Comment voit-on sur quelle branche on est actuellement ?
elle est mise en surbrillance

49) On considère que la branche originale (master ou main) est la branche d'intégration, c'est-à-dire celle qui va contenir l'historique de toutes les modifications développées au fur et à mesure dans les branches annexes

50) On va maintenant fusionner la branche fonctionnalite1, qui est terminée, avec la branche d'intégration
Updating 393117f..8fd2033
Fast-forward
 fichier2.md | 3 +++
 fichier3.md | 0
 fichier4.md | 0
 3 files changed, 3 insertions(+)
 create mode 100644 fichier3.md
 create mode 100644 fichier4.md
 
51) Se déplacer sur la branche master
git checkout masteur


52) Noter le changement dans l'onglet Git Graph
un nouveau commit de fusion est apparue sur la branche d'intégration, relié aux commits de la branche terminée

53) Fusionner avec la branche fonctionnalite1
deja fait au dessus

54) Noter le changement dans l'onglet Git Graph. Que signifie la mention Fast-forward indiquée par la sortie de la commande ?
 "Fast-forward" indique que la fusion de deux branches s'est effectuée sans créer de nouveau commit de fusion

55)On veut maintenant fusionner fonctionnalite2 dans la branche d'intégration (master)

56)Effectuer cette fusion

57)Noter le changement dans l'onglet Git Graph. Que signifie la mention Merge made by the ... ystrategy indiquée par la sortie de la commande ?
Merge made by the ... strategy" indique que les deux branches ont été fusionnées en créant un nouveau commit de fusion

58)Quelle est la différence fondamentale avec la fusion précédente ?
le différence entre les 2 est : pour la première la fusion c'est fait sans commit de fusion, et pour la 2éme, un nouveau commit de fusion a été créé pour enregistrer les conflits résolus entre les deux branches.

59)Créer une nouvelle branche fonctionnalite3, se déplacer dessus, et modifier le fichier fichier1.md en y ajoutant une ligne de texte. Committer : "Modification fichier1 pour fonctionnalité 3"

60)Comment utiliser Git Graph pour qu'il nous montre les différences entre l'ancienne version de fichier1.md et la version courante que l'on vient de committer ?

61)Repartir sur master, et modifier fichier1.md en y ajoutant aussi une ligne (différente de celle qu'on a ajoutée sur l'autre branche)

62)Tenter de fusionner la branche fonctionnalite3 avec master

63)Que se passe-t-il et pourquoi ?

64)Lancer un git status

65)Que doit-on faire si on veut annuler la fusion en cours ?

66)On veut résoudre le conflit. Plusieurs possibilités :

67)Conserver uniquement les modifications faites dans fonctionnalite3

68)Conserver uniquement les modifications faites dans master

69)Conserver les deux modifications

70)Supprimer les deux modifications ou remanier sensiblement le fichier pour les intégrer correctement

71)Git nous laisse totalement la main et ne va pas essayer d'imposer l'un de ces choix pour nous, ni nous assister dans l'application automatique de l'un d'entre eux : il faut examiner le(s) fichier(s) en conflit et éditer nous-mêmes
Ouvrir le fichier en question sous VS Code
La chaîne <<<<<<<<<< marque le début du conflit
La chaîne >>>>>>>>>> marque la fin du conflit
La chaîne ========== sépare les deux versions

Éditer le fichier pour faire en sorte d'intégrer les deux modifications ; à la fin de l'édition :
Sauvegarder

Il ne doit plus y avoir de marques quelconques en dehors des ajouts fonctionnels originaux, c'est-à-dire pas de <<<<<<<<<<, ni de mentions de nom de branche, etc. : vous rendez le fichier tel qu'il doit apparaître dans le commit de fusion, avec les conflits résolus manuellement

Ajouter les modification à l'index et committer

NB : parfois, plusieurs fichiers sont en conflit ; le processus est identique, il faut juste résoudre les conflits sur tous les fichiers

NB : les conflits de fusion sont fréquents lorsqu'on travaille en collaboration (plusieurs personnes vont travailler sur le même fichier pour remplir deux fonctionnalités différentes)

Les branches créées n'ont plus de raison d'exister
Elles avaient pour but de créer une déviation afin de travailler sur des fonctionnalités individuelles
On va vouloir nettoyer le dépôt en les supprimant
Cela ne va bien sûr pas supprimer tous les commits qui y sont associés
Attention cependant d'éviter en général de supprimer une branche qui n'a pas encore été intégrée à la branche d'intégration, sauf on souhaite vraiment abandonner le développement de cette branche
Ne pas réutiliser une branche qui a déjà été intégrée pour démarrer une nouvelle piste : toujours utiliser une nouvelle branche
Nouvelle tâche ? => nouvelle branche à partir d'un commit de la branche d'intégration (en général le plus récent)
Tâche terminée ? => fusion dans la branche d'intégration et suppression de la branche
Supprimer les trois branches fonctionnalitex (attention : on ne peut pas supprimer une branche sur laquelle on est)